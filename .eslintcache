[{"/Users/kostas/Projects/intercellar/src/index.tsx":"1","/Users/kostas/Projects/intercellar/src/reportWebVitals.ts":"2","/Users/kostas/Projects/intercellar/src/App.tsx":"3","/Users/kostas/Projects/intercellar/src/Hidden.tsx":"4","/Users/kostas/Projects/intercellar/src/utils.ts":"5","/Users/kostas/Projects/intercellar/src/state.ts":"6","/Users/kostas/Projects/intercellar/src/Serving.ts":"7","/Users/kostas/Projects/intercellar/src/Difficulty.ts":"8","/Users/kostas/Projects/intercellar/src/Scaffold.tsx":"9","/Users/kostas/Projects/intercellar/src/GameProgress.tsx":"10","/Users/kostas/Projects/intercellar/src/strings.ts":"11","/Users/kostas/Projects/intercellar/src/ServingsHub.tsx":"12","/Users/kostas/Projects/intercellar/src/TapLever.tsx":"13"},{"size":500,"mtime":1607207029852,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1607207029854,"results":"16","hashOfConfig":"15"},{"size":1174,"mtime":1607284090780,"results":"17","hashOfConfig":"15"},{"size":263,"mtime":1607217981544,"results":"18","hashOfConfig":"15"},{"size":478,"mtime":1607282703970,"results":"19","hashOfConfig":"15"},{"size":2801,"mtime":1607283511392,"results":"20","hashOfConfig":"15"},{"size":523,"mtime":1607278334772,"results":"21","hashOfConfig":"15"},{"size":64,"mtime":1607270808410,"results":"22","hashOfConfig":"15"},{"size":385,"mtime":1607283511392,"results":"23","hashOfConfig":"15"},{"size":1245,"mtime":1607284238606,"results":"24","hashOfConfig":"15"},{"size":288,"mtime":1607284247805,"results":"25","hashOfConfig":"15"},{"size":1967,"mtime":1607284292272,"results":"26","hashOfConfig":"15"},{"size":1344,"mtime":1607284652656,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"64gq1g",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kostas/Projects/intercellar/src/index.tsx",[],["56","57"],"/Users/kostas/Projects/intercellar/src/reportWebVitals.ts",[],"/Users/kostas/Projects/intercellar/src/App.tsx",[],"/Users/kostas/Projects/intercellar/src/Hidden.tsx",[],"/Users/kostas/Projects/intercellar/src/utils.ts",[],"/Users/kostas/Projects/intercellar/src/state.ts",["58","59"],"import { Difficulty } from \"./Difficulty\";\nimport { createServing, Serving, ServingTypes } from \"./Serving\";\n\n// -- selectors\nexport const selectServings = (state: State) => state.servings;\nexport const selectServingPreference = (state: State) => state.preferredServing;\nexport const selectNormalizedServedCustomersRatio = (state: State) =>\n  state.servings / state.customers;\nexport const selectServedCustomersPercentage = (state: State) =>\n  Math.ceil(selectNormalizedServedCustomersRatio(state) * 100);\nexport const selectBubbleVisible = (state: State) => state.bubbleVisible;\nexport const selectDifficultySetting = (state: State) => state.difficulty;\n\n// -- actions\ntype Actions = ReturnType<\n  | typeof addServing\n  | typeof changeBubbleVisibility\n  | typeof changeServing\n  | typeof toggleDifficultyPress\n  | typeof difficultySelected\n>;\nexport const addServing = () => <const>{ type: \"ADD_SERVING\" };\n\nexport const changeServing = (serving: ServingTypes) =>\n  <const>{\n    type: \"CHANGE_SERVING\",\n    payload: { serving },\n  };\n\nexport const changeBubbleVisibility = (show: boolean) =>\n  <const>{\n    type: \"CHANGE_BUBBLE_VISIBILITY\",\n    payload: { show },\n  };\n\nexport const toggleDifficultyPress = () =>\n  <const>{ type: \"TOGGLE_DIFFICULTY_PRESSED\" };\n\nexport const difficultySelected = (difficulty: Difficulty) =>\n  <const>{ type: \"SELECT_DIFFICULTY\", payload: { difficulty } };\n\nexport const MAX_KEGS = 74;\n\n// -- reducer\ntype Reducer = (state: State, action: Actions) => State;\nexport const reducer: Reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_SERVING\":\n      if (selectNormalizedServedCustomersRatio(state) >= 1) return state;\n      if (selectServingPreference(state) === ServingTypes.DOUBLE_BEER)\n        return { ...state, servings: selectServings(state) + 2 };\n      else return { ...state, servings: selectServings(state) + 1 };\n\n    case \"CHANGE_BUBBLE_VISIBILITY\":\n      return { ...state, bubbleVisible: action.payload.show };\n\n    case \"CHANGE_SERVING\":\n      return { ...state, preferredServing: action.payload.serving };\n\n    case \"TOGGLE_DIFFICULTY_PRESSED\":\n      if (selectDifficultySetting(state) === Difficulty.BEGINNER)\n        return { ...state, difficulty: Difficulty.NORMAL }; // Enable difficulty, default to normal\n      return { ...state, difficulty: Difficulty.BEGINNER }; // \"Disable\" difficulty\n\n    case \"SELECT_DIFFICULTY\":\n      return { ...state, difficulty: action.payload.difficulty };\n\n    default:\n      return state;\n  }\n};\n\nexport type State = typeof initialState;\nexport const initialState = {\n  servings: 0,\n  preferredServing: ServingTypes.LAGER,\n  customers: 18,\n  bubbleVisible: false,\n  difficulty: Difficulty.NORMAL,\n};\n","/Users/kostas/Projects/intercellar/src/Serving.ts",[],"/Users/kostas/Projects/intercellar/src/Difficulty.ts",[],"/Users/kostas/Projects/intercellar/src/Scaffold.tsx",[],"/Users/kostas/Projects/intercellar/src/GameProgress.tsx",["60","61","62"],"/Users/kostas/Projects/intercellar/src/strings.ts",[],"/Users/kostas/Projects/intercellar/src/ServingsHub.tsx",[],"/Users/kostas/Projects/intercellar/src/TapLever.tsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":2,"column":10,"nodeType":"69","messageId":"70","endLine":2,"endColumn":23},{"ruleId":"67","severity":1,"message":"71","line":2,"column":25,"nodeType":"69","messageId":"70","endLine":2,"endColumn":32},{"ruleId":"67","severity":1,"message":"72","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":24},{"ruleId":"67","severity":1,"message":"73","line":3,"column":20,"nodeType":"69","messageId":"70","endLine":3,"endColumn":26},{"ruleId":"67","severity":1,"message":"74","line":44,"column":6,"nodeType":"69","messageId":"70","endLine":44,"endColumn":27},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"@typescript-eslint/no-unused-vars","'createServing' is defined but never used.","Identifier","unusedVar","'Serving' is defined but never used.","'useMemo' is defined but never used.","'config' is defined but never used.","'AddingCustomersStatus' is defined but never used.","no-global-assign","no-unsafe-negation"]